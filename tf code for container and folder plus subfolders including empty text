provider "azurerm" {
  features {}
}

# Define Storage Account
resource "azurerm_storage_account" "storage" {
  name                     = "mystorageaccount"
  resource_group_name      = "my-resource-group"
  location                 = "eastus"
  account_tier             = "Standard"
  account_replication_type = "LRS"
}

# Define Storage Containers
variable "containers" {
  default = ["container1", "container2", "container3", "newcontainer"]
}

resource "azurerm_storage_container" "containers" {
  for_each              = toset(var.containers)
  name                  = each.key
  storage_account_name  = azurerm_storage_account.storage.name
  container_access_type = "private"
}

# Define top-level folders
variable "folders" {
  default = ["folder1", "folder2", "folder3", "folder4"]
}

# Define subfolders under each top-level folder
variable "subfolders" {
  default = {
    "folder1" = ["subfolderA", "subfolderB"]
    "folder2" = ["subfolderX", "subfolderY"]
    "folder3" = ["subfolderM", "subfolderN"]
  }
}

# Create top-level folders (simulated with empty blobs) inside all containers
resource "azurerm_storage_blob" "top_level_folders" {
  for_each = {
    for container in var.containers : container => container
  }

  # Loop through each folder and create an empty blob to simulate the folder
  for folder in var.folders : {
    name                   = "${folder}empty.txt"
    storage_account_name   = azurerm_storage_account.storage.name
    storage_container_name = azurerm_storage_container.containers[each.key].name
    type                   = "Block"
    source_content         = ""

    lifecycle {
      ignore_changes = [source_content]  # Prevents Terraform from overwriting existing files
    }
  }
}

# Create subfolders inside all containers
resource "azurerm_storage_blob" "subfolders" {
  for_each = merge([
    for container in var.containers : {
      for parent, subs in var.subfolders : {
        for sub in subs : "${container}/${parent}/${sub}/empty.txt" => container
      }
    }
  ]...)

  name                   = replace(each.key, "${each.value}/", "")  # Remove container prefix
  storage_account_name   = azurerm_storage_account.storage.name
  storage_container_name = azurerm_storage_container.containers[each.value].name
  type                   = "Block"
  source_content         = ""

  lifecycle {
    ignore_changes = [source_content]  # Ensures Terraform does not overwrite existing files
  }
}
